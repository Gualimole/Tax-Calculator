<!DOCTYPE html>
<!-- #WARN# -->
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <link href="docs.css" rel="stylesheet">
  <title>Tax-Calculator</title>
</head>    
<body>

<h1>Tax-Calculator</h1>

<!-- #NAVBAR# -->

<h3>Structural Overview</h3>

<p>
  Tax-Calculator has been designed using
  <a href="https://www.programiz.com/python-programming/object-oriented-programming"
     target="_blank">object-oriented programming (OOP)</a>
     principles.  There are seven classes and a collection of global
     utility functions, but most Python programming involves using
     only a few methods in three classes.
</p>

<h4>Quick Summary</h4>

<p>
  Typical Tax-Calculator usage involves creating two Calculator class
  objects: both containing the same sample of filing units (that is,
  Records class object), but each containing a different tax policy
  (that is, Policy class object).  The idea is to compare the
  calculated tax liabilities of the sample units under the two
  different tax policies, one of which is usually current-law policy
  and the other is a tax reform of interest.
</p>

<ul>

  <li><p>
    <b>rec</b> &rarr; Records class object.<br />
    Created by <b>Records()</b> when containing IRS-SOI-PUF-derived
    filing-unit data or created by <b>Records.cps_constructor()</b>
    when containing CPS-derived filing-unit data.
  </p></li>

  <li><p>
    <b>clp</b> &rarr; Policy class object containing parameters that
    characterize current-law policy.<br />
    Created by <b>Policy()</b>.
  </p></li>

  <li><p>
    <b>ref</b> &rarr; Policy class object containing parameters that
    characterize a tax reform.<br />
    Created using a Python dictionary
    <b>refdict</b> representing the reform by using the
    <b>implement_reform(refdict)</b> method on a Policy object
    created by <b>Policy()</b>.  Or created using a JSON file
    <b>filename</b> representing the reform by using the
    <b>implement_reform(Policy.read_json_reform(filename))</b> method
    on a Policy object
  </p></li>

  <li><p>
    <b>calc_clp</b> &rarr; Calculator class object for current-law policy.<br />
    Created by <b>Calculator(records=rec, policy=clp)</b>.
  </p></li>

  <li><p>
    <b>calc_ref</b> &rarr; Calculator class object for reform policy.<br />
    Created by <b>Calculator(records=rec, policy=ref)</b>.
  </p></li>

  <li><p>
    <b>calc_all()</b> &rarr; Calculator class method that computes tax
    liability (and many intermediate variables such as AGI) for each
    filing-unit.
  </p></li>

  <li><p>
    <b>dataframe(all_vars=True)</b> &rarr; Calculator class method
    that returns a Pandas DataFrame object containing all input and
    all output variables produced by the <b>calc_all()</b> method.
  </p></li>

</ul>

<p>
  For examples of Python scripts that use these classes and methods, see
  the <a href="https://pslmodels.github.io/Tax-Calculator/cookbook.html"
         target="_blank">Python Cookbook</a>.
</p>

<h4>Complete Story</h4>


<!--
parameters.py:17:  class Parameters():
  policy.py:13:      class Policy(Parameters):
  consumption.py:14: class Consumption(Parameters):
  growdiff.py:12:    class GrowDiff(Parameters):

growfactors.py:14: class GrowFactors():

records.py:15:     class Records(): USES: GrowFactors object

calculator.py:45:  class Calculator(): USES: Records and Policy objects
-->



  
<!-- #TOP# -->
</body>
</html>
